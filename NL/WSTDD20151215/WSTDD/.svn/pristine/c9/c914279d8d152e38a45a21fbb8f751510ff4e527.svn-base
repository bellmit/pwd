/**
 * 
 */
package com.newland.wstdd.mine.registrationlist;

import java.util.ArrayList;
import java.util.List;

import android.graphics.Matrix;
import android.os.Bundle;
import android.os.Message;
import android.os.Parcelable;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;

import com.newland.wstdd.R;
import com.newland.wstdd.common.base.BaseFragmentActivity;
import com.newland.wstdd.common.resultlisterer.OnPostListenerInterface;
import com.newland.wstdd.common.tools.UiHelper;
import com.newland.wstdd.login.RetMsg;
import com.newland.wstdd.mine.registrationlist.beanrequest.RegistrationListReq;
import com.newland.wstdd.mine.registrationlist.beanrequest.TddActivitySignVo;
import com.newland.wstdd.mine.registrationlist.beanrequest.UpdateRegistrationListReq;
import com.newland.wstdd.mine.registrationlist.beanresponse.RegistrationListRes;
import com.newland.wstdd.mine.registrationlist.beanresponse.UpdateRegistrationListRes;
import com.newland.wstdd.mine.registrationlist.handle.RegistrationHandle;
import com.newland.wstdd.netutils.BaseMessageMgr;
import com.newland.wstdd.netutils.HandleNetMessageMgr;

/**
 * 报名名单
 * 
 * @author H81 2015-11-10
 * 
 */
public class MineRegistrationListActivity extends BaseFragmentActivity implements OnPostListenerInterface {

	ViewPager mViewPager;
	private LinearLayout linearLayout1;
	private TextView textView1, textView2, textView3;
	private int currIndex = 0;// 当前页卡编号
	private ImageView imageView;// 页卡标题动画图片
	private int textViewW = 0;// 页卡标题的宽度
	private List<View> listViews;
	private YesPassView view1;
	private NoPassView view2;
	// 服务器返回的数据
	RegistrationListRes registrationListRes;
	// RegistrationHandle handlerReg=new RegistrationHandle(this);
	UpdateRegistrationListRes updateRegistrationListRes;
	RegistrationHandle handlerUpdate = new RegistrationHandle(this);
	List<TddActivitySignVo> tddActivitySigns = new ArrayList<TddActivitySignVo>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_registrationlist);
		setTitle();
		initControl();
		initViewPager();
		InitTextView();
		InitImageView();
		// 测试获取报名名单列表
//		getRegistrationListInfos();// 从服务器获取报名名单
//		getUpdateRegistrationListInfos();// 获取更新报名名单
	}

	private void setTitle() {
		ImageView left_btn = (ImageView) findViewById(R.id.head_left_iv);
		ImageButton right_btn = (ImageButton) findViewById(R.id.head_right_btn);
		TextView right_tv = (TextView) findViewById(R.id.head_right_tv);
		TextView center_tv = (TextView) findViewById(R.id.head_center_title);
		if (center_tv != null)
			center_tv.setText("报名名单");
		if (left_btn != null) {
			left_btn.setVisibility(View.VISIBLE);
			left_btn.setImageDrawable(getResources().getDrawable(R.drawable.ic_return));
			left_btn.setOnClickListener(this);
		}
		if (right_btn != null) {
			right_btn.setVisibility(View.GONE);
		}
		if (right_tv != null) {
			right_tv.setText("编辑");
			right_tv.setTextColor(getResources().getColor(R.color.originate_darkred));
			right_tv.setVisibility(View.VISIBLE);
			right_tv.setOnClickListener(this);
		}
	}

	private void initControl() {
		imageView = (ImageView) findViewById(R.id.cursor);
		linearLayout1 = (LinearLayout) findViewById(R.id.linearLayout1);
		mViewPager = (ViewPager) findViewById(R.id.pvr_user_pager);
		mViewPager.setOffscreenPageLimit(2);/* 预加载页面 */
	}

	/* 初始化ViewPager */
	private void initViewPager() {
		listViews = new ArrayList<View>();
		view1 = new YesPassView(this);
		view2 = new NoPassView(this);
		listViews.add(view1);
		listViews.add(view2);
		mViewPager.setAdapter(new MyPagerAdapter(listViews));
		mViewPager.setCurrentItem(0);
		mViewPager.setOnPageChangeListener(new MyOnPageChangeListener());
	}

	/* 初始化页卡标题 */
	private void InitTextView() {
		textView1 = (TextView) findViewById(R.id.text1);
		textView2 = (TextView) findViewById(R.id.text2);

		textView1.setOnClickListener(new MyOnClickListener(0));
		textView2.setOnClickListener(new MyOnClickListener(1));
		setImageViewWidth(textView1.getWidth());

	}

	/**
	 * ViewPager适配器
	 */
	public class MyPagerAdapter extends PagerAdapter {
		public List<View> mListViews;

		public MyPagerAdapter(List<View> mListViews) {
			this.mListViews = mListViews;
		}

		@Override
		public void destroyItem(View arg0, int arg1, Object arg2) {
			((ViewPager) arg0).removeView(mListViews.get(arg1));
		}

		@Override
		public void finishUpdate(View arg0) {
		}

		@Override
		public int getCount() {
			return mListViews.size();
		}

		@Override
		public Object instantiateItem(View arg0, int arg1) {
			((ViewPager) arg0).addView(mListViews.get(arg1), 0);
			return mListViews.get(arg1);
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == (arg1);
		}

		@Override
		public void restoreState(Parcelable arg0, ClassLoader arg1) {
		}

		@Override
		public Parcelable saveState() {
			return null;
		}

		@Override
		public void startUpdate(View arg0) {
		}
	}

	/* 页卡切换监听 */
	public class MyOnPageChangeListener implements OnPageChangeListener {

		@Override
		public void onPageSelected(int arg0) {
			if (textViewW == 0) {
				textViewW = textView1.getWidth();
			}
			Animation animation = new TranslateAnimation(textViewW * currIndex, textViewW * arg0, 0, 0);
			currIndex = arg0;
			animation.setFillAfter(true);/* True:图片停在动画结束位置 */
			animation.setDuration(300);
			imageView.startAnimation(animation);
			setTextTitleSelectedColor(arg0);
			setImageViewWidth(textViewW);

		}

		@Override
		public void onPageScrolled(int arg0, float arg1, int arg2) {
		}

		@Override
		public void onPageScrollStateChanged(int arg0) {
		}
	}

	/* 设置标题文本的颜色 */
	private void setTextTitleSelectedColor(int arg0) {
		int count = mViewPager.getChildCount();
		for (int i = 0; i < count; i++) {
			TextView mTextView = (TextView) linearLayout1.getChildAt(i);
			if (arg0 == i) {
				mTextView.setTextColor(0xffc80000);
			} else {
				mTextView.setTextColor(0xff969696);
			}
		}
	}

	/* 设置图片宽度 */
	private void setImageViewWidth(int width) {
		if (width != imageView.getWidth()) {
			LayoutParams laParams = (LayoutParams) imageView.getLayoutParams();
			laParams.width = width;
			imageView.setLayoutParams(laParams);
		}
	}

	/* 标题点击监听 */
	private class MyOnClickListener implements OnClickListener {
		private int index = 0;

		public MyOnClickListener(int i) {
			index = i;
		}

		public void onClick(View v) {
			mViewPager.setCurrentItem(index);
		}
	}

	/* 初始化动画 */
	private void InitImageView() {
		Matrix matrix = new Matrix();
		matrix.postTranslate(0, 0);
		imageView.setImageMatrix(matrix);// 设置动画初始位置
	}

	@Override
	protected void processMessage(Message msg) {

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.head_left_iv:
			finish();
			break;
		case R.id.head_right_tv:// 编辑
			UiHelper.ShowOneToast(this, "编辑");
			break;
		default:
			break;
		}
	}

	@Override
	public void refresh() {

	}

	/**
	 *  35.	活动报名人员列表
	 */
//	public void getUpdateRegistrationListInfos() {
//		try {
//			new Thread() {
//				public void run() {
//					// 需要发送一个request的对象进行请求
//					RegistrationListReq reqInfo = new RegistrationListReq();
//					reqInfo.setActivityId("activityId");
//					BaseMessageMgr mgr = new HandleNetMessageMgr();
//					RetMsg<RegistrationListRes> ret = mgr.getRegistrationListInfo(reqInfo);// 泛型类，
//					Message message = new Message();
//					message.what = RegistrationHandle.REGISTRATION_LIST;// 设置死
//					// 访问服务器成功 1 否则访问服务器失败
//					if (ret.getCode() == 1) {
//						registrationListRes = (RegistrationListRes) ret.getObj();
//						message.obj = registrationListRes;
//					} else {
//						message.obj = ret.getMsg();
//					}
//					handlerUpdate.sendMessage(message);
//				};
//			}.start();
//		} catch (Exception e) {
//			// TODO: handle exception
//		}
//	}

	/**
	 * 36.	更新报名列表
	 */
//	private void getRegistrationListInfos() {
//		// TODO dfdfa
//		try {
//			new Thread() {
//				public void run() {
//					UpdateRegistrationListReq reqInfo = new UpdateRegistrationListReq();
//					reqInfo.setTddActivitySigns(tddActivitySigns);
//					BaseMessageMgr mgr = new HandleNetMessageMgr();
//					RetMsg<UpdateRegistrationListRes> ret = mgr.getUpdateRegistrationListInfo(reqInfo);// 泛型类，
//					Message message = new Message();
//					message.what = RegistrationHandle.UPDATE_REGISTRATION_LIST;// 设置死
//					// 访问服务器成功 1 否则访问服务器失败
//					if (ret.getCode() == 1) {
//						updateRegistrationListRes = new UpdateRegistrationListRes();
//						updateRegistrationListRes.setGetResMess(StringUtil.noNull(ret.getMsg()));
//						message.obj = updateRegistrationListRes;
//					} else {
//						message.obj = ret.getMsg();
//					}
//					handlerUpdate.sendMessage(message);
//				};
//			}.start();
//		} catch (Exception e) {
//			// TODO: handle exception
//		}
//	}

	@Override
	public void OnHandleResultListener(Object obj, int responseId) {

	}

	@Override
	public void OnFailResultListener(String mess) {

	}

	@Override
	public void initView() {
		// TODO Auto-generated method stub
		
	}
}
