package com.newland.wstdd.login.regist;

import test.TestData;
import junit.framework.Test;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import com.newland.wstdd.R;
import com.newland.wstdd.common.base.BaseFragment;
import com.newland.wstdd.common.resultlisterer.OnPostListenerInterface;
import com.newland.wstdd.common.tools.UiHelper;
import com.newland.wstdd.login.RetMsg;
import com.newland.wstdd.login.beanrequest.RegistFirstReq;
import com.newland.wstdd.login.beanresponse.RegistFirstRes;
import com.newland.wstdd.login.handle.RegistFragmentHandle;
import com.newland.wstdd.netutils.BaseMessageMgr;
import com.newland.wstdd.netutils.HandleNetMessageMgr;

/**注册界面 
 * @author H81 2015-11-9
 *
 */
@SuppressLint("ValidFragment")
public class RegistFragment extends BaseFragment implements OnPostListenerInterface {
	private Button nextButton;//下一步
	private Context context;//上下文
	private boolean isOk;//验证首次登入是否成功
	private RegistFirstRes registFirstRes;//从服务器返回的信息
	private RegistFragmentHandle handler = new RegistFragmentHandle(this);
	@SuppressLint("ValidFragment")
	public RegistFragment(Context context){
		this.context=context;
	}
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		//下一步
		case R.id.regist_next:
			//进行第一步验证   看看是否成功只有成功了才会跳转到二个注册页页面
			registFirst();//发送到服务器上去，验证第一次是否成功
			
			break;

		default:
			break;
		}
	}

	//验证
	private void registFirst() {
		// TODO Auto-generated method stub
		refresh();//发送服务器请求
	}
	@Override
	protected View createAndInitView(LayoutInflater inflater,
			ViewGroup container, Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment_regist, container,false);	
		nextButton = (Button) view.findViewById(R.id.regist_next);
		nextButton.setOnClickListener(this);
		return view;
	}
	
	
	@Override
	public void refresh() {

		try {
			new Thread() {
				public void run() {
					String phone = TestData.nameString;//手机号码
					String veriCode = TestData.paswString;
					// 需要发送一个request的对象进行请求
					RegistFirstReq reqInfo = new RegistFirstReq();
					reqInfo.setPhoneNum(phone);
					reqInfo.setVeriCode(veriCode);
					BaseMessageMgr mgr = new HandleNetMessageMgr();
					RetMsg<RegistFirstRes> ret = mgr.getRegistInfo(reqInfo);// 泛型类，																
					Message message = new Message();
					message.what = RegistFragmentHandle.REGIST_FIRST;// 设置死
					// 访问服务器成功 1 否则访问服务器失败
					if (ret.getCode() == 1) {
						registFirstRes = (RegistFirstRes) ret.getObj();
						message.obj = registFirstRes;
					} else {
						message.obj = ret.getMsg();
					}
					handler.sendMessage(message);
				};
			}.start();
		} catch (Exception e) {
			// TODO: handle exception
		}
	
		
		
		
		
		
	}
	
	
	
	
	
	//处理服务器返回的内容  刷新在界面上
	@Override
	public void OnHandleResultListener(Object obj,int responseId) {
		// TODO Auto-generated method stub
		switch (responseId) {
		//第一次注册的处理
		case RegistFragmentHandle.REGIST_FIRST:
			try {
			registFirstRes = (RegistFirstRes) obj;
			if(registFirstRes!=null){
				String userIdString=registFirstRes.getUserId();//用户id
				String headImgUrlString=registFirstRes.getHeadImgUrl();//头像地址
				String nickNameString=registFirstRes.getNickName();//昵称
				Bundle bundle=new Bundle();
				bundle.putString("userIdString", userIdString);
				bundle.putString("headImgUrlString", headImgUrlString);
				bundle.putString("nickNameString", nickNameString);
				if(!userIdString.equals("")&&userIdString!=null){
					UiHelper.showRegistFinishActivity(getActivity(), bundle);
				}else{
					UiHelper.ShowOneToast(getActivity(), "无法获取用户ID,需重新发送验证码！");
				}
			
			}
			
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

		default:
			break;
		}
		
		
	}
	//请求失败后的操作
	@Override
	public void OnFailResultListener(String mess) {
		// TODO Auto-generated method stub
		UiHelper.ShowOneToast(getActivity(), mess);
	}
	

}
